from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import json
import os

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤
VOCAB_FILE = "vocab.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞
def load_vocab():
    if not os.path.exists(VOCAB_FILE):
        return []
    with open(VOCAB_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–∞–π–ª
def save_vocab(vocab):
    with open(VOCAB_FILE, "w", encoding="utf-8") as f:
        json.dump(vocab, f, indent=4, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä–∞ —Å–ª–æ–≤–∞
def get_word_data(word):
    url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()[0]
        meaning = data["meanings"][0]["definitions"][0]
        definition = meaning["definition"]
        example = meaning.get("example", "No example available.")
        return {
            "word": word,
            "definition": definition,
            "example": example
        }
    else:
        return None

# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /add <—Å–ª–æ–≤–æ>")
        return

    word = context.args[0].lower()
    vocab = load_vocab()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if any(entry["word"] == word for entry in vocab):
        await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ \"{word}\" —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ
    word_data = get_word_data(word)
    if word_data:
        vocab.append(word_data)
        save_vocab(vocab)
        await update.message.reply_text(
            f"‚úÖ –°–ª–æ–≤–æ \"{word}\" –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\nüìñ Definition: {word_data['definition']}\nüìå Example: {word_data['example']}"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\".")

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
async def main():
    app = ApplicationBuilder().token(os.environ["TELEGRAM_API_TOKEN"]).build()
    app.add_handler(CommandHandler("add", add_word))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

